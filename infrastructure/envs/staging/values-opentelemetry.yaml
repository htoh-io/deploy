mode: daemonset

fullnameOverride: "open-telemetry-collector"

service:
  enabled: true

presets:
  hostMetrics:
    enabled: false
  clusterMetrics:
    enabled: false
  kubeletMetrics:
    enabled: false
  logsCollection:
    enabled: true
    includeCollectorLogs: true

config:
  receivers: 
    filelog:
      exclude:
      - /var/log/pods/open-telemetry_open-telemetry-collector*/opentelemetry-collector/*.log
      - /var/log/pods/kube-system_konnectivity-agent*/konnectivity-agent/*.log
      include:
      # - /var/log/pods/*/*/*.log
      - /var/log/pods/ingress-nginx_nginx-ingress-ingress-nginx-controller-*/*/*.log
  
  processors:
    transform:
      error_mode: ignore
      log_statements:
        - context: log
          statements:
            # Parse body as JSON and merge the resulting map with the cache map, ignoring non-json bodies.
            # cache is a field exposed by OTTL that is a temporary storage place for complex operations.
            - merge_maps(cache, ParseJSON(body), "upsert") where IsMatch(body, "^\\{") 
            - set(attributes["logger"], "ingress") where IsMatch(resource.attributes["k8s.pod.name"], ".+-ingress-nginx-controller-.*")
            - set(attributes["loki.attribute.labels"], "logger")
            - set(attributes["http.status"], cache["status"])
  
  exporters:
    logging:
      verbosity: detailed
    #prometheusremotewrite:
    #  endpoint: ${env:PROMETHEUS_ENDPOINT}
    loki:
      endpoint: https://api_key:O6ZvDBeoSZZG_gkVQXihq8sC_y9EGwUvop-1JOPwMdrWQ0UzxRwdV_XMT68WvoNX@logs.cockpit.fr-par.scw.cloud/loki/api/v1/push
  service:
    pipelines:
      metrics: null
      traces: null
      logs:
        processors:
          - transform
        exporters:
          - loki